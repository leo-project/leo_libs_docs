leo\_http
================

-  `Description <#description>`__
-  `Function Index <#index>`__
-  `Function Details <#functions>`__

leo\_http is utilities for HTTP and S3-API.

Description
-----------

leo\_http is utilities for HTTP and S3-API

Function Index
--------------

+--------------------------------------------------------+---------------------------------------------------------------------------------------------+
| `get\_amz\_headers/1 <#get_amz_headers-1>`__           | Retrieve AMZ-S3-related headers.                                                            |
+--------------------------------------------------------+---------------------------------------------------------------------------------------------+
| `get\_amz\_headers4cow/1 <#get_amz_headers4cow-1>`__   | Retrieve AMZ-S3-related headers for Cowboy.                                                 |
+--------------------------------------------------------+---------------------------------------------------------------------------------------------+
| `get\_headers/2 <#get_headers-2>`__                    | Retrieve AMZ-S3-related headers assume that TreeHeaders is generated by mochiweb\_header.   |
+--------------------------------------------------------+---------------------------------------------------------------------------------------------+
| `get\_headers/3 <#get_headers-3>`__                    | Retrieve AMZ-S3-related headers assume that TreeHeaders is generated by mochiweb\_header.   |
+--------------------------------------------------------+---------------------------------------------------------------------------------------------+
| `get\_headers4cow/2 <#get_headers4cow-2>`__            | Retrieve headers for cowboy.                                                                |
+--------------------------------------------------------+---------------------------------------------------------------------------------------------+
| `get\_headers4cow/3 <#get_headers4cow-3>`__            | Retrieve headers for Cowboy.                                                                |
+--------------------------------------------------------+---------------------------------------------------------------------------------------------+
| `key/2 <#key-2>`__                                     | Retrieve a filename(KEY) from Host and Path.                                                |
+--------------------------------------------------------+---------------------------------------------------------------------------------------------+
| `key/3 <#key-3>`__                                     | Retrieve a filename(KEY) from Host and Path.                                                |
+--------------------------------------------------------+---------------------------------------------------------------------------------------------+
| `rfc1123\_date/1 <#rfc1123_date-1>`__                  | Retrieve RFC-1123 formated data.                                                            |
+--------------------------------------------------------+---------------------------------------------------------------------------------------------+
| `url\_encode/2 <#url_encode-2>`__                      | URL encode a string binary.                                                                 |
+--------------------------------------------------------+---------------------------------------------------------------------------------------------+
| `web\_date/1 <#web_date-1>`__                          | Convert gregorian seconds to date formated data( YYYY-MM-DDTHH:MI:SS000Z ).                 |
+--------------------------------------------------------+---------------------------------------------------------------------------------------------+

Function Details
----------------

get\_amz\_headers/1
~~~~~~~~~~~~~~~~~~~

``get_amz_headers(TreeHeaders) -> list()``

-  ``TreeHeaders = gb_trees:tree()``

Retrieve AMZ-S3-related headers

get\_amz\_headers4cow/1
~~~~~~~~~~~~~~~~~~~~~~~

``get_amz_headers4cow(TreeHeaders) -> list()``

-  ``TreeHeaders = gb_trees:tree()``

Retrieve AMZ-S3-related headers for Cowboy

get\_headers/2
~~~~~~~~~~~~~~

``get_headers(TreeHeaders, FilterFun) -> list()``

-  ``TreeHeaders = gb_trees:tree()``
-  ``FilterFun = function()``

Retrieve AMZ-S3-related headers assume that TreeHeaders is generated by
mochiweb\_header

get\_headers/3
~~~~~~~~~~~~~~

``get_headers(TreeHeaders, FilterFun, Acc) -> list()``

-  ``TreeHeaders = gb_trees:tree()``
-  ``FilterFun = function()``
-  ``Acc = [any()]``

Retrieve AMZ-S3-related headers assume that TreeHeaders is generated by
mochiweb\_header

get\_headers4cow/2
~~~~~~~~~~~~~~~~~~

``get_headers4cow(Headers, FilterFun) -> list()``

-  ``Headers = [any()]``
-  ``FilterFun = function()``

Retrieve headers for cowboy

get\_headers4cow/3
~~~~~~~~~~~~~~~~~~

``get_headers4cow(Headers, FilterFun, Acc) -> list()``

-  ``Headers = [any()]``
-  ``FilterFun = function()``
-  ``Acc = [any()]``

Retrieve headers for Cowboy

key/2
~~~~~

``key(Host, Path) -> {binary(), binary()}``

-  ``Host = binary()``
-  ``Path = binary()``

Retrieve a filename(KEY) from Host and Path.

key/3
~~~~~

``key(EndPoints, Host, Path) -> {binary(), binary()}``

-  ``EndPoints = [binary()]``
-  ``Host = binary()``
-  ``Path = binary()``

Retrieve a filename(KEY) from Host and Path.

rfc1123\_date/1
~~~~~~~~~~~~~~~

``rfc1123_date(DateSec) -> string()``

-  ``DateSec = integer()``

Retrieve RFC-1123 formated data

url\_encode/2
~~~~~~~~~~~~~

| ``url_encode(Bin::binary(), Opts::[noplus | upper | noslash]) -> binary()``

URL encode a string binary. The ``noplus`` option disables the default
behaviour of quoting space characters, ``\s``, as ``+``. The ``upper``
option overrides the default behaviour of writing hex numbers using
lowecase letters to using uppercase letters instead.

web\_date/1
~~~~~~~~~~~

``web_date(GregSec) -> string()``

-  ``GregSec = integer()``

Convert gregorian seconds to date formated data( YYYY-MM-DDTHH:MI:SS000Z
)
